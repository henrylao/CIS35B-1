//Usage of FileInputStream
import java.io.*;

public class ReadBytes {
    public static void main(String[] arguments) {
        try {
            FileInputStream file = new
                FileInputStream("ReadBytes.class");
            boolean eof = false;
            int count = 0;
            while (!eof) {
                int input = file.read();
                System.out.print(input + " ");
                if (input == -1)
                    eof = true;
                else
                    count++;
            }
            file.close();
            System.out.println("\nBytes read: " + count);
        } catch (IOException e) {
            System.out.println("Error -- " + e.toString());
        }
    }
}


//Usage of FileOutputStream
import java.io.*;

public class WriteBytes {
    public static void main(String[] arguments) {
        int[] data = { 71, 73, 70, 56, 57, 97, 15, 0, 15, 0,
            128, 0, 0, 255, 255, 255, 0, 0, 0, 44, 0, 0, 0,
            0, 15, 0, 15, 0, 0, 2, 33, 132, 127, 161, 200,
            185, 205, 84, 128, 241, 81, 35, 175, 155, 26,
            228, 254, 105, 33, 102, 121, 165, 201, 145, 169,
            154, 142, 172, 116, 162, 240, 90, 197, 5, 0, 59 };
        try {
            FileOutputStream file = new
                FileOutputStream("pic.gif");
            for (int i = 0; i < data.length; i++)
                file.write(data[i]);
            file.close();
        } catch (IOException e) {
            System.out.println("Error -- " + e.toString());
        }
    }
}


//Usage of Buffered Stream Objects
import java.io.*;

public class BufferDemo {
    public static void main(String[] arguments) {
        int start = 0;
        int finish = 255;
        if (arguments.length > 1) {
            start = Integer.parseInt(arguments[0]);
            finish = Integer.parseInt(arguments[1]);
        } else if (arguments.length > 0)
            start = Integer.parseInt(arguments[0]);
        ArgStream as = new ArgStream(start, finish);
        System.out.println("\nWriting: ");
        boolean success = as.writeStream();
        System.out.println("\nReading: ");
        boolean readSuccess = as.readStream();
    }
}

class ArgStream {
    int start = 0;
    int finish = 255;

    ArgStream(int st, int fin) {
        start = st;
        finish = fin;
    }

    boolean writeStream() {
        try {
            FileOutputStream file = new
                FileOutputStream("numbers.dat");
            BufferedOutputStream buff = new
                BufferedOutputStream(file);
            for (int out = start; out <= finish; out++) {
                buff.write(out);
                System.out.print(" " + out);
            }
            buff.close();
            return true;
        } catch (IOException e) {
            System.out.println("Exception: " + e.getMessage());
            return false;
        }
    }

    boolean readStream() {
        try {
            FileInputStream file = new
                FileInputStream("numbers.dat");
            BufferedInputStream buff = new
                BufferedInputStream(file);
            int in = 0;
            do {
                in = buff.read();
                if (in != -1)
                    System.out.print(" " + in);
            } while (in != -1);
            buff.close();
            return true;
        } catch (IOException e) {
            System.out.println("Exception: " + e.getMessage());
            return false;
        }
    }
}

//Usage of Filter Objects
import java.io.*;

class WritePrimes {
    public static void main(String arguments[]) {
        int[] primes = new int[400];
        int numPrimes = 0;
        // candidate: the number that might be prime
        int candidate = 2;
        while (numPrimes < 400) {
            if (isPrime(candidate)) {
                primes[numPrimes] = candidate;
                numPrimes++;
            }
            candidate++;
        }

        try {
            // Write output to disk
            FileOutputStream file = new
                FileOutputStream("400primes.dat");
            BufferedOutputStream buff = new
                BufferedOutputStream(file);
            DataOutputStream data = new
                DataOutputStream(buff);

            for (int i = 0; i < 400; i++)
               data.writeInt(primes[i]);
            data.close();
        } catch (IOException e) {
            System.out.println("Error -- " + e.toString());
        }
    }

    public static boolean isPrime(int checkNumber) {
        double root = Math.sqrt(checkNumber);
        for (int i = 2; i <= root; i++) {
            if (checkNumber % i == 0)
                return false;
        }
        return true;
    }
}

--------------

import java.io.*;

class ReadPrimes {
    public static void main(String arguments[]) {
        try {
            FileInputStream file = new
                FileInputStream("400primes.dat");
            BufferedInputStream buff = new
                BufferedInputStream(file);
            DataInputStream data = new
                DataInputStream(buff);

            try {
                while (true) {
                    int in = data.readInt();
                    System.out.print(in + " ");
                }
            } catch (EOFException eof) {
                buff.close();
            }
        } catch (IOException e) {
            System.out.println("Error -- " + e.toString());
        }
    }
}

//Working with Text Files
import java.io.*;

public class ReadSource {
    public static void main(String[] arguments) {
        try {
            FileReader file = new
                FileReader("ReadSource.java");
            BufferedReader buff = new
                BufferedReader(file);
            boolean eof = false;
            while (!eof) {
                String line = buff.readLine();
                if (line == null)
                   eof = true;
                else
                    System.out.println(line);
            }
            buff.close();
        } catch (IOException e) {
            System.out.println("Error -- " + e.toString());
        }
    }
}





//Base class that can be serialized
//------------------------------------------------
class Employee implements Serializable
{  
  public Employee(String n, double s, Day d)
   {  name = n;
      salary = s;
      hireDay = d;
   }

   public Employee() {}

   public void print()
   {  System.out.println(name + " " + salary 
         + " " + hireYear());
   }

   public void raiseSalary(double byPercent)
   {  salary *= 1 + byPercent / 100;
   }

   public int hireYear()
   {  return hireDay.getYear();
   }

   private String name;
   private double salary;
   private Day hireDay;
}

//Inheritance - 
//Notice raiseSalary is being overridden.
//super keyword is used to call the method in parent class.
//Can you override a constructor?
//------------------------------------------------
class Manager extends Employee
{  public Manager(String n, double s, Day d)
   {  super(n, s, d);
      secretaryName = "";
   }
    
   public Manager() {}

   public void raiseSalary(double byPercent)
   {  // add 1/2% bonus for every year of service
      Day today = new Day();
      double bonus = 0.5 * (today.getYear() - hireYear());
      super.raiseSalary(byPercent + bonus);
   }

   public void setSecretaryName(String n)
   {  secretaryName = n;
   }

   public String getSecretaryName()
   {  return secretaryName;
   }

   private String secretaryName;
}

//Programs demonstrating Polymorphism and Object Serialization.
//---------------------------------------------------------------------------------
import java.io.*;
import corejava.*;
class ObjectFileTest
{  public static void main(String[] args)
   {  try
      {  Employee[] staff = new Employee[3];

         staff[0] = new Employee("Harry Hacker", 35000, new Day(1989,10,1));
         staff[1] = new Manager("Carl Cracker", 75000, new Day(1987,12,15));
         staff[2] = new Employee("Tony Tester", 38000, new Day(1990,3,15));
      
         //This is how you write a file to disk.
	 ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("employee.dat"));
         out.writeObject(staff);
         out.close();

	 //Reading a file	
         ObjectInputStream in = new ObjectInputStream(new FileInputStream("employee.dat"));
	 Employee[] newStaff = (Employee[]) in.readObject();

         int i;

	 //Polymorphism across object of same type	
	 for (i = 0; i < newStaff.length; i++)
            newStaff[i].raiseSalary(100);
         for (i = 0; i < newStaff.length; i++)
            newStaff[i].print();
      }
      catch(Exception e)
      {  System.out.print("Error: " + e);
         System.exit(1);
      }
   }
}